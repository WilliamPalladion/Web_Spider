import re

'''
正则就是用一些具有特殊含义的符号组合到一起（成为正则表达式）来描述字符或字符串的方法
或者说，正则就是用来描述一类事物的规则，在Python中用内嵌模块re来实现
正则表达式模式被编译成一系列的字节码，然后由用C编写的匹配引擎执行
'''

# \w 匹配字母数字及下划线
print(re.findall('\w', 'egon 123 + _ - +'))

# \W 匹配非字母数字及下划线
print(re.findall('\W', 'egon 123 + _ - +'))

'''
\s   匹配任意空白字符，等价于[\t\n\r\f]
\S   匹配任意非空白字符

\d   匹配任意数字，等价于[0, 9]
\D   匹配任意非数字

\A   匹配字符串开始
\Z   匹配字符串结束，若存在换行，只匹配到换行前的结束字符串
\z   匹配字符串结束

\G   匹配最后匹配完成的位置
\n   匹配一个换行符
\t   匹配一个制表符

^    匹配字符串开头  # re.findall('^e', 'aegone'), 输出 [], 如果只找e， re.findall('e', 'aegone')， 输出['e', 'e']
$    匹配字符串末尾
.    匹配任意一个字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符
     
[...] 用来表示一组字符，单独列出： [amk] 匹配'a', 'm' 或 'k'
[^...] 不在[]中的字符

*     匹配0个或多个的表达式 >=0
+     匹配1个或多个的表达式 >=1
?     匹配0个或1个由前面的正则表达式定义的片段，非贪婪模式
{n}   精确匹配n个前面表达式
{n, m} 匹配n到m次由前面正则表达式定义的片段，贪婪方式

a|b   匹配a或b
()    匹配括号内的表达式，也表示一个组

'''

# .表示任意一个字符
print(re.findall('a.b', 'a1b a b a-b aaaaaab'))  # 输出 ['a1b', 'a b', 'a-b', 'aab']
